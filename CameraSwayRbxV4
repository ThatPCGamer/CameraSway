local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local bobbingConnection = nil
local func1 = 0
local func2 = 0
local func3 = 0
local func4 = 0
local val = 0
local val2 = 0
local intValue = 5 -- Renamed from 'int' to avoid conflict with a potential keyword and for clarity
local int2Value = 5 -- Renamed from 'int2' for clarity
local vect3 = Vector3.new()

local function lerp(a, b, c)
    return a + (b - a) * c
end

local function cleanup()
    if bobbingConnection then
        bobbingConnection:Disconnect()
        bobbingConnection = nil
    end
    -- Disable the script. If the character is removed, the script instance will be destroyed anyway,
    -- but this handles cases where health is zero but removal is delayed.
    if script then 
        script.Disabled = true
    end
end

bobbingConnection = RunService.RenderStepped:Connect(function(deltaTime)
    -- Check if Humanoid exists and health is greater than 0
    if not Humanoid or Humanoid.Health <= 0 then
        cleanup()
        return -- Stop further execution of RenderStepped
    end

    deltaTime = deltaTime * 50 -- BobbingIntensity
    
    local rootPart = Humanoid.RootPart
    local rootMagnitude = 0
    if rootPart then
        rootMagnitude = Vector3.new(rootPart.Velocity.X, 0, rootPart.Velocity.Z).Magnitude
    end
    
    local calcRootMagnitude = math.min(rootMagnitude, 25)

    if deltaTime > 1.5 then -- Consider if this check is still needed or if deltaTime can realistically be > 1.5
        func1 = 0
        func2 = 0
    else
        func1 = lerp(func1, math.cos(tick() * 0.5 * math.random(5, 7.5)) * (math.random(2.5, 10) / 100) * deltaTime, 0.05 * deltaTime)
        func2 = lerp(func2, math.cos(tick() * 0.5 * math.random(2.5, 5)) * (math.random(1, 5) / 100) * deltaTime, 0.05 * deltaTime)
    end

    Camera.CFrame = Camera.CFrame * 
                    CFrame.fromEulerAnglesXYZ(0, 0, math.rad(func3)) * 
                    CFrame.fromEulerAnglesXYZ(math.rad(func4 * deltaTime), math.rad(val * deltaTime), val2) * 
                    CFrame.Angles(0, 0, math.rad(func4 * deltaTime * (calcRootMagnitude / 5))) * 
                    CFrame.fromEulerAnglesXYZ(math.rad(func1), math.rad(func2), math.rad(func2 * 10))

    local humanoidVelocity = Vector3.new()
    if rootPart then
        humanoidVelocity = rootPart.Velocity
    end
    val2 = math.clamp(lerp(val2, -Camera.CFrame:VectorToObjectSpace(humanoidVelocity / math.max(Humanoid.WalkSpeed, 0.01)).X * 0.04, 0.1 * deltaTime), -0.12, 0.1)
    func3 = lerp(func3, math.clamp(UserInputService:GetMouseDelta().X, -3, 3), 0.25 * deltaTime) -- SwayIntensity
    func4 = lerp(func4, math.sin(tick() * intValue) / 5 * math.min(1, int2Value / 10), 0.25 * deltaTime)

    if rootMagnitude > 1 then
        val = lerp(val, math.cos(tick() * 0.5 * math.floor(intValue)) * (intValue / 200), 0.25 * deltaTime)
    else
        val = lerp(val, 0, 0.05 * deltaTime)
    end

    if rootMagnitude > 6 then -- BobbingSpeed
        intValue = 15
        int2Value = 8
    elseif rootMagnitude > 0.1 then -- BobbingSpeed
        intValue = 6
        int2Value = 7
    else
        int2Value = 0
    end

    Player.CameraMaxZoomDistance = 128
    Player.CameraMinZoomDistance = 0.5
    vect3 = lerp(vect3, Camera.CFrame.LookVector, 0.125 * deltaTime)
end)

-- Handle character removal (e.g., on respawn or if character is manually reloaded)
Player.CharacterRemoving:Connect(function(removingCharacter)
    if removingCharacter == Character then
        cleanup()
    end
end)
